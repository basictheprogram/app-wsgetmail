#!/usr/bin/env perl
### before: #!@PERL@

use strict;
use FindBin;
use lib "$FindBin::Bin/../lib";
use JSON;
use App::wsgetmail;
use File::Slurp;
use Pod::Usage;
use Getopt::Long;

my ($config_file, $options, $dry_run);
my ($debug, $help) = (0,0);

GetOptions('h|help|?' => \$help,
           "v|verbose|debug" => \$debug,
           'dry-run' => \$dry_run,
           "c|config|configuration=s" => \$config_file,
           'options=s' => \$options);

pod2usage(1) if $help;
pod2usage(1) unless ($config_file);
die "Can't find config file $config_file" unless (-f $config_file);

# parse options, over-ride config if provided extra options
my $config_json = read_file($config_file);
my $config = decode_json($config_json);
my $extra_options = (defined($options) && $options ) ? decode_json($options) : { };
foreach my $option ( keys %$extra_options ) {
    $config->{$option} = $extra_options->{$option};
}
$config->{dry_run} = $dry_run if (defined $dry_run);
$config->{debug} = $debug if (defined $debug);


my $getmail = App::wsgetmail->new({config => $config});

print "\nfetching mail using configuration $config_file\n";

my $count = 0;

while (my $message = $getmail->get_next_message()) {
    my $ok = $getmail->process_message($message);
    $count++ if ($ok);
}

print "\nprocessed $count messages\n";


__END__

=head1 NAME

wsgetmail - get mail from cloud webservices

=head1 DESCRIPTION

get mail from cloud webservices

=head1 SYNOPSIS

wsgetmail --config[uration] path/to/file.json [--options "{..}"] [--debug]

=head1 ARGUMENTS

=over 4

=item config - configuration file to be used

=item options - json string of options over-riding or adding to configuration from filename (optional)

=item debug - flag indicating that debug warnings should be output (optional)

=item dry-run - fetch mail and deliver it but don't delete or mark as read (optional)

=back

=head1 CONFIGURATION

Configuration of the wsgetmail tool needs the following fields specific to the ms365 application:
Application (client) ID,
Directory (tenant) ID

For access to the email account you need:
Account email address
Account password
Folder (defaults to inbox, currently only one folder is supported)

example configuration :

{
   "command": "/path/to/rt/bin/rt-mailgate",
   "command_args": "--url http://rt.example.tld/ --queue general --action correspond",
   "command_timeout": 15,
   "recipient":"rt@example.tld",
   "action_on_fetched":"mark_as_read",
   "username":"rt@example.tld",
   "user_password":"password",
   "tenant_id":"abcd1234-xxxx-xxxx-xxxx-123abcde1234",
   "client_id":"abcd1234-xxxx-xxxx-xxxx-1234abcdef99",
   "folder":"Inbox"
}

an example configuration file is included in the docs/ directory of this package

=cut
